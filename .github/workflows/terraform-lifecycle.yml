name: Terraform Lifecycle

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "Environment (Dev or Prod)"
        required: true
        default: Dev
      action:
        description: "Terraform action (apply or destroy)"
        required: true
        default: apply

  push:
    branches:
      - main
    tags:
      - "deploy-dev"
      - "deploy-prod"

jobs:
  terraform:
    name: Terraform Lifecycle
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Stage and Action from Inputs or Tag
        id: set_vars
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "STAGE=${{ github.event.inputs.stage }}" >> $GITHUB_ENV
            echo "ACTION=${{ github.event.inputs.action }}" >> $GITHUB_ENV
          else
            ref_name="${GITHUB_REF##*/}"
            if [[ "$ref_name" == deploy-dev* ]]; then
              echo "STAGE=Dev" >> $GITHUB_ENV
            elif [[ "$ref_name" == deploy-prod* ]]; then
              echo "STAGE=Prod" >> $GITHUB_ENV
            else
              echo "STAGE=Dev" >> $GITHUB_ENV
            fi
            echo "ACTION=apply" >> $GITHUB_ENV
          fi

      - name: Normalize STAGE to lowercase for filenames
        run: echo "STAGE_LOWER=$(echo $STAGE | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init -backend-config="key=${STAGE}.tfstate"
        working-directory: terraform

      - name: Terraform Workspace Select or Create
        run: |
          terraform workspace list
          if terraform workspace list | grep -qw "${STAGE}"; then
            terraform workspace select "${STAGE}"
          else
            terraform workspace new "${STAGE}"
          fi
        working-directory: terraform

      - name: Terraform Validate and Plan
        run: |
          terraform validate
          if [ "${ACTION}" = "destroy" ]; then
            terraform plan -destroy -var-file="${STAGE_LOWER}_config.tfvars" -out=tfplan
          else
            terraform plan -var-file="${STAGE_LOWER}_config.tfvars" -out=tfplan
          fi
        working-directory: terraform

      - name: Terraform Apply
        if: env.ACTION == 'apply'
        run: terraform apply -auto-approve tfplan
        working-directory: terraform

      - name: Terraform Destroy
        if: env.ACTION == 'destroy'
        run: terraform destroy -auto-approve -var-file="${STAGE_LOWER}_config.tfvars"
        working-directory: terraform

      - name: Debug Terraform Outputs
        if: env.ACTION == 'apply'
        run: terraform output
        working-directory: terraform


      - name: Get EC2 Public IP
        working-directory: terraform
        id: ec2_ip
        if: env.ACTION == 'apply'
        run: |
          set -e
          EC2_IP=$(terraform output -raw      writeonly_instance_public_ip 2>/dev/null || echo "")
          if [[ -z "$EC2_IP" ]]; then
            echo "Terraform output for      writeonly_instance_public_ip is empty or failed."
            exit 1
          fi
          echo "EC2_IP=$EC2_IP" >> "$GITHUB_ENV"

      - name: Wait for port 80 to be available
        working-directory: terraform
        if: env.ACTION == 'apply'
        run: |
          for i in {1..10}; do
            echo "Checking if port 80 is reachable on $EC2_IP..."
            if curl -s --head "http://$EC2_IP" | grep "200 OK" > /dev/null; then
              echo "App is up and serving on port 80"
              exit 0
            fi
            echo "App not ready yet. Retrying in 10 seconds..."
            sleep 10
          done
          echo "Timeout: App not reachable on port 80"
          exit 1
