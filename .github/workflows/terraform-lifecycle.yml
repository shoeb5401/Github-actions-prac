name: Terraform Lifecycle

on:
  workflow_dispatch:
    inputs:
      stage:
        description: 'Environment (dev or prod)'
        required: true
        default: dev
      action:
        description: 'Terraform action (apply or destroy)'
        required: true
        default: apply

  push:
    branches:
      - main
    tags:
      - 'deploy-dev*'
      - 'deploy-prod*'

jobs:
  terraform:
    name: Terraform ${{ inputs.action || 'apply' }} - ${{ inputs.stage || 'dev' }}
    runs-on: ubuntu-latest
    env:
      STAGE: ${{ inputs.stage || 'dev' }}
      ACTION: ${{ inputs.action || 'apply' }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Terraform State (if exists)
        if: env.ACTION == 'destroy'
        uses: actions/download-artifact@v4
        with:
          name: terraform-state-${{ env.STAGE }}
          path: terraform

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init & Select/Create Workspace
        run: |
          terraform init -backend-config="key=${STAGE}.tfstate"

          terraform workspace list
          if terraform workspace list | grep -qw "${STAGE}"; then
            terraform workspace select "${STAGE}"
          else
            terraform workspace new "${STAGE}"
          fi

          echo "Current Workspace: $(terraform workspace show)"
        working-directory: terraform

      - name: Terraform Plan
        run: |
          terraform validate
          if [ "${ACTION}" = "destroy" ]; then
            terraform plan -destroy -var-file="${STAGE}_config.tfvars" -out=tfplan
          else
            terraform plan -var-file="${STAGE}_config.tfvars" -out=tfplan
          fi
        working-directory: terraform

      - name: Terraform Apply
        if: env.ACTION == 'apply'
        run: terraform apply -auto-approve tfplan
        working-directory: terraform

      - name: Terraform Destroy
        if: env.ACTION == 'destroy'
        run: terraform destroy -auto-approve -var-file="${STAGE}_config.tfvars"
        working-directory: terraform

      - name: Upload Terraform State
        if: env.ACTION == 'apply'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-${{ env.STAGE }}
          path: terraform/terraform.tfstate

